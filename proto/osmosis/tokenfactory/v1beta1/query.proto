syntax = "proto3";
package osmosis.tokenfactory.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "osmosis/tokenfactory/v1beta1/authorityMetadata.proto";
import "osmosis/tokenfactory/v1beta1/stakedrop.proto";
import "osmosis/tokenfactory/v1beta1/params.proto";
import "amino/amino.proto";

option go_package = "github.com/ChihuahuaChain/chihuahua/x/tokenfactory/types";

// Query defines the gRPC querier service.
service Query {
  // Params defines a gRPC query method that returns the tokenfactory module's
  // parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/osmosis/tokenfactory/v1beta1/params";
  }

  // DenomAuthorityMetadata defines a gRPC query method for fetching
  // DenomAuthorityMetadata for a particular denom.
  rpc DenomAuthorityMetadata(QueryDenomAuthorityMetadataRequest)
      returns (QueryDenomAuthorityMetadataResponse) {
    option (google.api.http).get =
        "/osmosis/tokenfactory/v1beta1/denoms/{denom}/authority_metadata";
  }

  // DenomsFromCreator defines a gRPC query method for fetching all
  // denominations created by a specific admin/creator.
  rpc DenomsFromCreator(QueryDenomsFromCreatorRequest)
      returns (QueryDenomsFromCreatorResponse) {
    option (google.api.http).get =
        "/osmosis/tokenfactory/v1beta1/denoms_from_creator/{creator}";
  }

  rpc StakeDrops(QueryStakeDropsRequest)
      returns (QueryStakeDropsResponse) {
    option (google.api.http).get =
        "/osmosis/tokenfactory/v1beta1/stakedrops";
  }

  rpc StakeDropsFromDenom(QueryStakeDropFromDenomRequest)
      returns (QueryStakeDropFromDenomResponse) {
    option (google.api.http).get =
      "/osmosis/tokenfactory/v1beta1/stakedrops_from_denom/{denom}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryDenomAuthorityMetadataRequest defines the request structure for the
// DenomAuthorityMetadata gRPC query.
message QueryDenomAuthorityMetadataRequest {
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
}

// QueryDenomAuthorityMetadataResponse defines the response structure for the
// DenomAuthorityMetadata gRPC query.
message QueryDenomAuthorityMetadataResponse {
  DenomAuthorityMetadata authority_metadata = 1 [
    (gogoproto.moretags) = "yaml:\"authority_metadata\"",
    (gogoproto.nullable) = false
  ];
}

// QueryDenomsFromCreatorRequest defines the request structure for the
// DenomsFromCreator gRPC query.
message QueryDenomsFromCreatorRequest {
  string creator = 1 [ (gogoproto.moretags) = "yaml:\"creator\"" ];
}

// QueryDenomsFromCreatorRequest defines the response structure for the
// DenomsFromCreator gRPC query.
message QueryDenomsFromCreatorResponse {
  repeated string denoms = 1 [ (gogoproto.moretags) = "yaml:\"denoms\"" ];
}

// QueryDenomsMetadataRequest is the request type for the Query/DenomsMetadata RPC method.
message QueryStakeDropsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
// method.
message QueryStakeDropsResponse {
  // metadata provides the client information for all the registered tokens.
  repeated Stakedrop stakedrops = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDenomsFromCreatorRequest defines the request structure for the
// DenomsFromCreator gRPC query.
message QueryStakeDropFromDenomRequest {
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
}

// QueryDenomsFromCreatorRequest defines the response structure for the
// DenomsFromCreator gRPC query.
message QueryStakeDropFromDenomResponse {
  repeated Stakedrop stakedrops = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

