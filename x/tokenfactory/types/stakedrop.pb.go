// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/tokenfactory/v1beta1/stakedrop.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Stakedrop struct {
	Amount         types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	AmountPerBlock types.Coin `protobuf:"bytes,2,opt,name=amount_per_block,json=amountPerBlock,proto3" json:"amount_per_block" yaml:"amount"`
	StartBlock     int64      `protobuf:"varint,3,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock       int64      `protobuf:"varint,4,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
}

func (m *Stakedrop) Reset()         { *m = Stakedrop{} }
func (m *Stakedrop) String() string { return proto.CompactTextString(m) }
func (*Stakedrop) ProtoMessage()    {}
func (*Stakedrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd4240998049b2c8, []int{0}
}
func (m *Stakedrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stakedrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stakedrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stakedrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stakedrop.Merge(m, src)
}
func (m *Stakedrop) XXX_Size() int {
	return m.Size()
}
func (m *Stakedrop) XXX_DiscardUnknown() {
	xxx_messageInfo_Stakedrop.DiscardUnknown(m)
}

var xxx_messageInfo_Stakedrop proto.InternalMessageInfo

func (m *Stakedrop) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Stakedrop) GetAmountPerBlock() types.Coin {
	if m != nil {
		return m.AmountPerBlock
	}
	return types.Coin{}
}

func (m *Stakedrop) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Stakedrop) GetEndBlock() int64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*Stakedrop)(nil), "osmosis.tokenfactory.v1beta1.Stakedrop")
}

func init() {
	proto.RegisterFile("osmosis/tokenfactory/v1beta1/stakedrop.proto", fileDescriptor_cd4240998049b2c8)
}

var fileDescriptor_cd4240998049b2c8 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xb1, 0x4e, 0x02, 0x31,
	0x18, 0xc7, 0xaf, 0x62, 0x88, 0x94, 0x68, 0xcc, 0x45, 0x13, 0x44, 0x53, 0x08, 0x13, 0x83, 0x69,
	0x83, 0x2e, 0xc6, 0x11, 0x16, 0x47, 0x83, 0x1b, 0x0b, 0xe9, 0x95, 0xca, 0x35, 0x70, 0xfd, 0x2e,
	0x6d, 0xcf, 0xc8, 0x5b, 0xf8, 0x58, 0x8c, 0x8c, 0x4e, 0xc4, 0xc0, 0x03, 0x98, 0xf8, 0x04, 0x86,
	0xf6, 0x30, 0xba, 0xba, 0x7d, 0xed, 0xff, 0xf7, 0xfb, 0x7f, 0x49, 0x8b, 0xaf, 0xc1, 0x66, 0x60,
	0x95, 0x65, 0x0e, 0x66, 0x52, 0x3f, 0x73, 0xe1, 0xc0, 0x2c, 0xd8, 0x4b, 0x2f, 0x91, 0x8e, 0xf7,
	0x98, 0x75, 0x7c, 0x26, 0x27, 0x06, 0x72, 0x9a, 0x1b, 0x70, 0x10, 0x5f, 0x95, 0x34, 0xfd, 0x4d,
	0xd3, 0x92, 0x6e, 0x9e, 0x4d, 0x61, 0x0a, 0x1e, 0x64, 0xbb, 0x29, 0x38, 0x4d, 0x22, 0xbc, 0xc4,
	0x12, 0x6e, 0xe5, 0x4f, 0xb1, 0x00, 0xa5, 0x43, 0xde, 0xf9, 0x44, 0xb8, 0xf6, 0xb4, 0xdf, 0x13,
	0x3f, 0xe0, 0x2a, 0xcf, 0xa0, 0xd0, 0xae, 0x81, 0xda, 0xa8, 0x5b, 0xbf, 0xb9, 0xa0, 0x41, 0xa7,
	0x3b, 0x7d, 0xbf, 0x89, 0x0e, 0x40, 0xe9, 0xfe, 0xf9, 0x72, 0xdd, 0x8a, 0xbe, 0xd6, 0xad, 0xe3,
	0x05, 0xcf, 0xe6, 0xf7, 0x9d, 0xa0, 0x75, 0x86, 0xa5, 0x1f, 0x8f, 0xf0, 0x69, 0x98, 0xc6, 0xb9,
	0x34, 0xe3, 0x64, 0x0e, 0x62, 0xd6, 0x38, 0xf8, 0x67, 0xe7, 0x49, 0x18, 0x1e, 0xa5, 0xe9, 0xef,
	0x7a, 0xe2, 0x16, 0xae, 0x5b, 0xc7, 0x8d, 0x2b, 0x6b, 0x2b, 0x6d, 0xd4, 0xad, 0x0c, 0xb1, 0xbf,
	0x0a, 0xc0, 0x25, 0xae, 0x49, 0x3d, 0x29, 0xe3, 0x43, 0x1f, 0x1f, 0x49, 0x3d, 0xf1, 0x61, 0x7f,
	0xb8, 0xdc, 0x10, 0xb4, 0xda, 0x10, 0xf4, 0xb1, 0x21, 0xe8, 0x6d, 0x4b, 0xa2, 0xd5, 0x96, 0x44,
	0xef, 0x5b, 0x12, 0x8d, 0xee, 0xa6, 0xca, 0xa5, 0x45, 0x42, 0x05, 0x64, 0x6c, 0x90, 0xaa, 0xb4,
	0xe0, 0x69, 0xc1, 0x07, 0x29, 0x57, 0x9a, 0x89, 0xfd, 0x91, 0xbd, 0xfe, 0xfd, 0x2b, 0xb7, 0xc8,
	0xa5, 0x4d, 0xaa, 0xfe, 0x31, 0x6f, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x86, 0xdc, 0xbd, 0x73,
	0xd0, 0x01, 0x00, 0x00,
}

func (m *Stakedrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stakedrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stakedrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlock != 0 {
		i = encodeVarintStakedrop(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.StartBlock != 0 {
		i = encodeVarintStakedrop(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.AmountPerBlock.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStakedrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStakedrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStakedrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakedrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Stakedrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovStakedrop(uint64(l))
	l = m.AmountPerBlock.Size()
	n += 1 + l + sovStakedrop(uint64(l))
	if m.StartBlock != 0 {
		n += 1 + sovStakedrop(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovStakedrop(uint64(m.EndBlock))
	}
	return n
}

func sovStakedrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakedrop(x uint64) (n int) {
	return sovStakedrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stakedrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakedrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stakedrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stakedrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakedrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakedrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPerBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakedrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakedrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountPerBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakedrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakedrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakedrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakedrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakedrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakedrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakedrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakedrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakedrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakedrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakedrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakedrop = fmt.Errorf("proto: unexpected end of group")
)
